(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{600:function(n,o,e){"use strict";e.r(o),o.default="const vertex = /* glsl */ `\n    precision highp float;\n    precision highp int;\n\n    attribute vec3 position;\n    attribute vec4 random;\n\n    uniform mat4 modelMatrix;\n    uniform mat4 viewMatrix;\n    uniform mat4 projectionMatrix;\n    uniform float uTime;\n\n    varying vec4 vRandom;\n\n    void main() {\n        vRandom = random;\n        \n        // positions are 0->1, so make -1->1\n        vec3 pos = position * 2.0 - 1.0;\n        \n        // Scale towards camera to be more interesting\n        pos.z *= 10.0;\n        \n        // modelMatrix is one of the automatically attached uniforms when using the Mesh class\n        vec4 mPos = modelMatrix * vec4(pos, 1.0);\n\n        // add some movement in world space\n        float t = uTime * 0.6;\n        mPos.x += sin(t * random.z + 6.28 * random.w) * mix(0.1, 1.5, random.x);\n        mPos.y += sin(t * random.y + 6.28 * random.x) * mix(0.1, 1.5, random.w);\n        mPos.z += sin(t * random.w + 6.28 * random.y) * mix(0.1, 1.5, random.z);\n        \n        // get the model view position so that we can scale the points off into the distance\n        vec4 mvPos = viewMatrix * mPos;\n        gl_PointSize = 300.0 / length(mvPos.xyz) * (random.x + 0.1);\n        gl_Position = projectionMatrix * mvPos;\n    }\n`;\n\nconst fragment = /* glsl */ `\n    precision highp float;\n    precision highp int;\n\n    uniform float uTime;\n\n    varying vec4 vRandom;\n\n    void main() {\n        vec2 uv = gl_PointCoord.xy;\n        \n        float circle = smoothstep(0.5, 0.4, length(uv - 0.5)) * 0.8;\n        \n        gl_FragColor.rgb = 0.8 + 0.2 * sin(uv.yxx + uTime + vRandom.y * 6.28) + vec3(0.1, 0.0, 0.3);\n        gl_FragColor.a = circle;\n    }\n`;\n\nconst {Scene} = spritejs;\nconst {Mesh3d} = spritejs.ext3d;\nconst container = document.getElementById('container');\nconst scene = new Scene({\n  container,\n  displayRatio: 2,\n});\nconst layer = scene.layer3d('fglayer', {\n  camera: {\n    fov: 15,\n    z: 15,\n  },\n});\n\nconst num = 100;\nconst position = new Float32Array(num * 3);\nconst random = new Float32Array(num * 4);\n\nfor(let i = 0; i < num; i++) {\n  position.set([Math.random(), Math.random(), Math.random()], i * 3);\n  random.set([Math.random(), Math.random(), Math.random(), Math.random()], i * 4);\n}\nconst model = {\n  position,\n  random,\n};\nconst program = layer.createProgram({\n  vertex,\n  fragment,\n  uniforms: {\n    uTime: {value: 0},\n  },\n  depthTest: false,\n});\nconst particles = new Mesh3d(program, {mode: 'POINTS', model});\nlayer.append(particles);\nlayer.bindTime(program);"}}]);