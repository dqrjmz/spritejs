(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{589:function(n,t,o){"use strict";o.r(t),t.default="const {Scene} = spritejs;\nconst {Mesh3d, shaders} = spritejs.ext3d;\nconst container = document.getElementById('container');\nconst scene = new Scene({\n  container,\n  width: 600,\n  height: 600,\n});\nconst layer = scene.layer3d('fglayer', {\n  camera: {\n    fov: 35,\n    z: 8,\n  },\n});\n\nconst program = layer.createProgram({\n  ...shaders.NORMAL,\n  cullFace: null,\n});\n\nfunction normalize(v) {\n  const len = Math.hypot(...v);\n  return [v[0] / len, v[1] / len, v[2] / len];\n}\n\n// \u4e24\u4e2a\u5411\u91cf\u7684\u53c9\u79ef\u5c31\u662f\u8fd9\u4e2a\u5411\u91cf\u7684\u6cd5\u5411\u91cf\nfunction getNormal(a, b, c) {\n  const ab = [a[0] - b[0], a[1] - b[1], a[2] - b[2]];\n  const bc = [b[0] - c[0], b[1] - c[1], b[2] - c[2]];\n\n  return normalize([\n    ab[1] * bc[2] - ab[2] * bc[1],\n    ab[0] * bc[2] - ab[2] * bc[0],\n    ab[0] * bc[1] - ab[1] * bc[0],\n  ]);\n}\n\nconst p = 1 / Math.sqrt(2);\n\nconst position = [\n  -1, 0, -p,\n  1, 0, -p,\n  0, 1, p,\n  -1, 0, -p,\n  1, 0, -p,\n  0, -1, p,\n  1, 0, -p,\n  0, -1, p,\n  0, 1, p,\n  -1, 0, -p,\n  0, 1, p,\n  0, -1, p,\n];\n\nconst normal = [];\n\nfor(let i = 0; i < position.length; i += 9) {\n  const a = [position[i], position[i + 1], position[i + 2]],\n    b = [position[i + 3], position[i + 4], position[i + 5]],\n    c = [position[i + 6], position[i + 7], position[i + 8]];\n\n  const norm = getNormal(a, b, c);\n  normal.push(...norm, ...norm, ...norm);\n}\n\nconst model = {\n  position,\n  normal,\n};\n\nconst sprite = new Mesh3d(program, {\n  model,\n});\nlayer.append(sprite);\n\nsprite.animate([\n  {rotateY: 0},\n  {rotateY: 360},\n], {\n  duration: 7000,\n  iterations: Infinity,\n});\n\nsprite.animate([\n  {rotateZ: 0},\n  {rotateZ: 360},\n], {\n  duration: 17000,\n  iterations: Infinity,\n});\n\nsprite.animate([\n  {rotateX: 0},\n  {rotateX: -360},\n], {\n  duration: 11000,\n  iterations: Infinity,\n});\n\nlayer.setOrbit();"}}]);